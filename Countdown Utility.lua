--[[

    Authors: Ziffix, Cha
    Version: 1.1.2
    Date:    23/2/18

]]


-- Services
local httpService = game:GetService("HttpService")


-- Variables
local countdown = {}
local countdownPrototype = {}

local countdownPrivate = {}


-- Functions

--[[
    @param    condition   boolean   | The result of the condition
    @param    message     string    | The error message to be raised
    @param    level = 1   number?   | The level at which to raise the error
    @return               void

    Checks if the given number is an integer. Raises an error at
    the given level if not.
]]
local function _assertLevel(condition: boolean, message: string, level: number)
    assert(condition, "Argument #1 missing or nil.")
    assert(message, "Argument #2 missing or nil.")

    level = (level or 0) + 1

    if condition then
        return condition
    end

    error(message, level)
end


--[[
    @param    self    countdown   | The countdown object
    @return           void

    Handles core countdown process.
]]
local function _countdownStart(self)
    _assertLevel(self, "Argument #1 missing or nil.", 2)

    local private = countdownPrivate[self]

    for secondsLeft = private.duration - 1, 1, -1 do
        task.wait(1)

        -- Countdown object was destroyed
        if private.tick == nil then
            return
        end

        private.tick:Fire(secondsLeft)
        private.secondsLeft = secondsLeft

        for _, taskInfo in private.intervalTasks do
            if secondsLeft % taskInfo.intervalSeconds ~= 0 then
                continue
            end

            if secondsLeft ~= 0 then
                task.spawn(taskInfo.handle)
            end
        end
    end

    -- Countdown object was destroyed
    if private.finished == nil then
        return
    end

    private.finished:Fire()
end


-- Constructor

--[[
    @param    duration    number      | The duration of the countdown
    @return               countdown   | The generated countdown object

    Generates a countdown object.
]]
function countdown.new(duration: number)
    _assertLevel(duration, "Argument #1 missing or nil.", 2)
    _assertLevel(duration % 1 == 0, "Expected integer, got decimal.", 2)

    local self = setmetatable({}, countdownPrototype)
    local private = {}

    private.secondsLeft = duration
    private.intervalTasks = {}

    private.tick = Instance.new("BindableEvent")
    private.finished = Instance.new("BindableEvent")

    self.Tick = private.tick.Event
    self.Finished = private.finished.Event

    countdownPrivate[self] = private

    return self
end


-- Methods

--[[
    @return   void

    Begins synchronous countdown process.
]]
function countdownPrototype:start()
    _assertLevel(cooldownPrivate[self], "Cooldown object is destroyed", 2)
    
    task.spawn(_countdownStart, self)
end


--[[
    @param    interval    number      | The interval at which the callback executes
    @param    callback    function    | The function to be ran at the given interval
    @return               string      | The GUID representing the task

    Compiles interval and callback data into interval repository.
]]
function countdownPrototype:addTask(interval: number, callback: (number) -> ())
    _assertLevel(interval, "Argument #1 missing or nil.", 2)
    _assertLevel(callback, "Argument #2 missing or nil.", 2)
    _assertLevel(interval % 1 == 0, "Expected integer, got decimal.", 2)

    local private = _assertLevel(cooldownPrivate[self], "Cooldown object is destroyed", 2)

    local taskInfo = {

        Interval = interval,
        Task = callback,
        TaskId = httpService:GenerateGUID()

    }

    table.insert(private.intervalTasks, taskInfo)

    return taskInfo.TaskId
end


--[[
    @param    taskId    string    | The ID generated by countdown:addTask()
    @return             void

    Removes the associated task from the interval repository.
]]
function countdownPrototype:removeTask(taskId)
    _assertLevel(taskId, "Argument #1 missing or nil.", 2)
    
    local private = _assertLevel(cooldownPrivate[self], "Cooldown object is destroyed", 2)

    for index, taskInfo in private.intervalTasks do
        if taskInfo.id ~= taskId then
            continue
        end

        table.remove(private.intervalTasks, index)

        return
    end

    error("Could not find a task by the given ID.", 2)
end


--[[
    @return   number    | The seconds remaining in the countdown

    Returns the seconds remaining in the countdown.
]]
function countdownPrototype:getSecondsLeft()
    local private = _assertLevel(cooldownPrivate[self], "Cooldown object is destroyed", 2)

    return private.secondsLeft
end


--[[
    @return   void

    Cleans up object data.
]]
function countdownPrototype:destroy()    
    local private = _assertLevel(cooldownPrivate[self], "Cooldown object is destroyed", 2)

    private.tick:Destroy()
    private.finished:Destroy()

    table.clear(private.intervalTasks)

    cooldownPrivate[self] = nil
end


-- Setup
countdownPrototype.__index = countdownPrototype
countdownPrototype.__newindex = function() end
countdownPrototype.__metatable = "This metatable is locked."

return countdown
